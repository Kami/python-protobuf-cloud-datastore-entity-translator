// Code generated by protoc-gen-go. DO NOT EDIT.
// source: compat/example_compat.proto

package example_compat

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ExampleCompatEnumModel int32

const (
	ExampleCompatEnumModel_ENUM10 ExampleCompatEnumModel = 0
	ExampleCompatEnumModel_ENUM11 ExampleCompatEnumModel = 1
	ExampleCompatEnumModel_ENUM12 ExampleCompatEnumModel = 2
)

var ExampleCompatEnumModel_name = map[int32]string{
	0: "ENUM10",
	1: "ENUM11",
	2: "ENUM12",
}

var ExampleCompatEnumModel_value = map[string]int32{
	"ENUM10": 0,
	"ENUM11": 1,
	"ENUM12": 2,
}

func (x ExampleCompatEnumModel) String() string {
	return proto.EnumName(ExampleCompatEnumModel_name, int32(x))
}

func (ExampleCompatEnumModel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_54e697ecc33a0316, []int{0}
}

type ExampleCompatNestedModel struct {
	StringKey            string                 `protobuf:"bytes,1,opt,name=string_key,json=stringKey,proto3" json:"string_key,omitempty"`
	Int32Key             int32                  `protobuf:"varint,2,opt,name=int32_key,json=int32Key,proto3" json:"int32_key,omitempty"`
	EnumKey              ExampleCompatEnumModel `protobuf:"varint,3,opt,name=enum_key,json=enumKey,proto3,enum=ExampleCompatEnumModel" json:"enum_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ExampleCompatNestedModel) Reset()         { *m = ExampleCompatNestedModel{} }
func (m *ExampleCompatNestedModel) String() string { return proto.CompactTextString(m) }
func (*ExampleCompatNestedModel) ProtoMessage()    {}
func (*ExampleCompatNestedModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_54e697ecc33a0316, []int{0}
}

func (m *ExampleCompatNestedModel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExampleCompatNestedModel.Unmarshal(m, b)
}
func (m *ExampleCompatNestedModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExampleCompatNestedModel.Marshal(b, m, deterministic)
}
func (m *ExampleCompatNestedModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExampleCompatNestedModel.Merge(m, src)
}
func (m *ExampleCompatNestedModel) XXX_Size() int {
	return xxx_messageInfo_ExampleCompatNestedModel.Size(m)
}
func (m *ExampleCompatNestedModel) XXX_DiscardUnknown() {
	xxx_messageInfo_ExampleCompatNestedModel.DiscardUnknown(m)
}

var xxx_messageInfo_ExampleCompatNestedModel proto.InternalMessageInfo

func (m *ExampleCompatNestedModel) GetStringKey() string {
	if m != nil {
		return m.StringKey
	}
	return ""
}

func (m *ExampleCompatNestedModel) GetInt32Key() int32 {
	if m != nil {
		return m.Int32Key
	}
	return 0
}

func (m *ExampleCompatNestedModel) GetEnumKey() ExampleCompatEnumModel {
	if m != nil {
		return m.EnumKey
	}
	return ExampleCompatEnumModel_ENUM10
}

// ExampleCompat DB model definition which contains most of the common field types (simple and scalar)
type ExampleCompatDBModel struct {
	// Simple types
	Int32Key  int32   `protobuf:"varint,1,opt,name=int32_key,json=int32Key,proto3" json:"int32_key,omitempty"`
	StringKey string  `protobuf:"bytes,2,opt,name=string_key,json=stringKey,proto3" json:"string_key,omitempty"`
	BoolKey   bool    `protobuf:"varint,3,opt,name=bool_key,json=boolKey,proto3" json:"bool_key,omitempty"`
	BytesKey  []byte  `protobuf:"bytes,4,opt,name=bytes_key,json=bytesKey,proto3" json:"bytes_key,omitempty"`
	DoubleKey float64 `protobuf:"fixed64,14,opt,name=double_key,json=doubleKey,proto3" json:"double_key,omitempty"`
	FloatKey  float32 `protobuf:"fixed32,15,opt,name=float_key,json=floatKey,proto3" json:"float_key,omitempty"`
	Int64Key  int64   `protobuf:"varint,16,opt,name=int64_key,json=int64Key,proto3" json:"int64_key,omitempty"`
	// Container types with simple values
	MapStringString map[string]string `protobuf:"bytes,5,rep,name=map_string_string,json=mapStringString,proto3" json:"map_string_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringInt32  map[string]int32  `protobuf:"bytes,6,rep,name=map_string_int32,json=mapStringInt32,proto3" json:"map_string_int32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StringArrayKey  []string          `protobuf:"bytes,7,rep,name=string_array_key,json=stringArrayKey,proto3" json:"string_array_key,omitempty"`
	Int32ArrayKey   []int32           `protobuf:"varint,8,rep,packed,name=int32_array_key,json=int32ArrayKey,proto3" json:"int32_array_key,omitempty"`
	// Container types with complex values
	ComplexArrayKey []*ExampleCompatNestedModel `protobuf:"bytes,9,rep,name=complex_array_key,json=complexArrayKey,proto3" json:"complex_array_key,omitempty"`
	// Enum types
	EnumKey ExampleCompatEnumModel `protobuf:"varint,10,opt,name=enum_key,json=enumKey,proto3,enum=ExampleCompatEnumModel" json:"enum_key,omitempty"`
	// Complex types from protobuf stdlib
	TimestampKey *timestamp.Timestamp `protobuf:"bytes,11,opt,name=timestamp_key,json=timestampKey,proto3" json:"timestamp_key,omitempty"`
	StructKey    *_struct.Struct      `protobuf:"bytes,12,opt,name=struct_key,json=structKey,proto3" json:"struct_key,omitempty"`
	// Other special types
	NullKey              _struct.NullValue `protobuf:"varint,13,opt,name=null_key,json=nullKey,proto3,enum=google.protobuf.NullValue" json:"null_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ExampleCompatDBModel) Reset()         { *m = ExampleCompatDBModel{} }
func (m *ExampleCompatDBModel) String() string { return proto.CompactTextString(m) }
func (*ExampleCompatDBModel) ProtoMessage()    {}
func (*ExampleCompatDBModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_54e697ecc33a0316, []int{1}
}

func (m *ExampleCompatDBModel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExampleCompatDBModel.Unmarshal(m, b)
}
func (m *ExampleCompatDBModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExampleCompatDBModel.Marshal(b, m, deterministic)
}
func (m *ExampleCompatDBModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExampleCompatDBModel.Merge(m, src)
}
func (m *ExampleCompatDBModel) XXX_Size() int {
	return xxx_messageInfo_ExampleCompatDBModel.Size(m)
}
func (m *ExampleCompatDBModel) XXX_DiscardUnknown() {
	xxx_messageInfo_ExampleCompatDBModel.DiscardUnknown(m)
}

var xxx_messageInfo_ExampleCompatDBModel proto.InternalMessageInfo

func (m *ExampleCompatDBModel) GetInt32Key() int32 {
	if m != nil {
		return m.Int32Key
	}
	return 0
}

func (m *ExampleCompatDBModel) GetStringKey() string {
	if m != nil {
		return m.StringKey
	}
	return ""
}

func (m *ExampleCompatDBModel) GetBoolKey() bool {
	if m != nil {
		return m.BoolKey
	}
	return false
}

func (m *ExampleCompatDBModel) GetBytesKey() []byte {
	if m != nil {
		return m.BytesKey
	}
	return nil
}

func (m *ExampleCompatDBModel) GetDoubleKey() float64 {
	if m != nil {
		return m.DoubleKey
	}
	return 0
}

func (m *ExampleCompatDBModel) GetFloatKey() float32 {
	if m != nil {
		return m.FloatKey
	}
	return 0
}

func (m *ExampleCompatDBModel) GetInt64Key() int64 {
	if m != nil {
		return m.Int64Key
	}
	return 0
}

func (m *ExampleCompatDBModel) GetMapStringString() map[string]string {
	if m != nil {
		return m.MapStringString
	}
	return nil
}

func (m *ExampleCompatDBModel) GetMapStringInt32() map[string]int32 {
	if m != nil {
		return m.MapStringInt32
	}
	return nil
}

func (m *ExampleCompatDBModel) GetStringArrayKey() []string {
	if m != nil {
		return m.StringArrayKey
	}
	return nil
}

func (m *ExampleCompatDBModel) GetInt32ArrayKey() []int32 {
	if m != nil {
		return m.Int32ArrayKey
	}
	return nil
}

func (m *ExampleCompatDBModel) GetComplexArrayKey() []*ExampleCompatNestedModel {
	if m != nil {
		return m.ComplexArrayKey
	}
	return nil
}

func (m *ExampleCompatDBModel) GetEnumKey() ExampleCompatEnumModel {
	if m != nil {
		return m.EnumKey
	}
	return ExampleCompatEnumModel_ENUM10
}

func (m *ExampleCompatDBModel) GetTimestampKey() *timestamp.Timestamp {
	if m != nil {
		return m.TimestampKey
	}
	return nil
}

func (m *ExampleCompatDBModel) GetStructKey() *_struct.Struct {
	if m != nil {
		return m.StructKey
	}
	return nil
}

func (m *ExampleCompatDBModel) GetNullKey() _struct.NullValue {
	if m != nil {
		return m.NullKey
	}
	return _struct.NullValue_NULL_VALUE
}

func init() {
	proto.RegisterEnum("ExampleCompatEnumModel", ExampleCompatEnumModel_name, ExampleCompatEnumModel_value)
	proto.RegisterType((*ExampleCompatNestedModel)(nil), "ExampleCompatNestedModel")
	proto.RegisterType((*ExampleCompatDBModel)(nil), "ExampleCompatDBModel")
	proto.RegisterMapType((map[string]int32)(nil), "ExampleCompatDBModel.MapStringInt32Entry")
	proto.RegisterMapType((map[string]string)(nil), "ExampleCompatDBModel.MapStringStringEntry")
}

func init() { proto.RegisterFile("compat/example_compat.proto", fileDescriptor_54e697ecc33a0316) }

var fileDescriptor_54e697ecc33a0316 = []byte{
	// 558 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4d, 0x6f, 0xda, 0x40,
	0x10, 0xed, 0xe2, 0x02, 0xf6, 0xf0, 0xe5, 0xb8, 0xa8, 0x21, 0xa4, 0x55, 0xad, 0x1c, 0xaa, 0x6d,
	0x0e, 0xa6, 0x71, 0x52, 0x54, 0x55, 0x95, 0xaa, 0xa4, 0xe5, 0x50, 0x21, 0x38, 0x2c, 0x6d, 0xae,
	0xc8, 0xc0, 0x06, 0xa1, 0xfa, 0x4b, 0xc6, 0xae, 0xe2, 0xbf, 0xd0, 0x73, 0x7f, 0x70, 0xb5, 0xb3,
	0xc6, 0x60, 0x42, 0x95, 0x5c, 0xc0, 0xfb, 0xde, 0x9b, 0xb7, 0x33, 0xbb, 0x6f, 0xe1, 0x74, 0x1e,
	0x78, 0xa1, 0x13, 0xf7, 0xf8, 0xbd, 0xe3, 0x85, 0x2e, 0x9f, 0xca, 0xa5, 0x15, 0x46, 0x41, 0x1c,
	0x74, 0x5f, 0x2d, 0x83, 0x60, 0xe9, 0xf2, 0x1e, 0xae, 0x66, 0xc9, 0x5d, 0x6f, 0x1d, 0x47, 0xc9,
	0x7c, 0xc3, 0xbe, 0xd9, 0x67, 0xe3, 0x95, 0xc7, 0xd7, 0xb1, 0xe3, 0x85, 0x52, 0x70, 0xf6, 0x87,
	0x40, 0x67, 0x20, 0x7d, 0xbf, 0xa2, 0xed, 0x98, 0xaf, 0x63, 0xbe, 0x18, 0x05, 0x0b, 0xee, 0x1a,
	0xaf, 0x01, 0xd6, 0x71, 0xb4, 0xf2, 0x97, 0xd3, 0x5f, 0x3c, 0xed, 0x10, 0x93, 0x50, 0x8d, 0x69,
	0x12, 0x19, 0xf2, 0xd4, 0x38, 0x05, 0x6d, 0xe5, 0xc7, 0x97, 0x36, 0xb2, 0x25, 0x93, 0xd0, 0x32,
	0x53, 0x11, 0x10, 0xa4, 0x0d, 0x2a, 0xf7, 0x13, 0x0f, 0x39, 0xc5, 0x24, 0xb4, 0x69, 0x1f, 0x5b,
	0x85, 0x8d, 0x06, 0x7e, 0xe2, 0xe1, 0x36, 0xac, 0x2a, 0x84, 0x43, 0x9e, 0x9e, 0xfd, 0xad, 0x42,
	0xbb, 0xa0, 0xf9, 0x76, 0x23, 0x1b, 0x29, 0xec, 0x44, 0xf6, 0x76, 0x2a, 0x76, 0x59, 0xda, 0xef,
	0xf2, 0x04, 0xd4, 0x59, 0x10, 0xb8, 0x79, 0x23, 0x2a, 0xab, 0x8a, 0x75, 0x36, 0xc0, 0x2c, 0x8d,
	0xf9, 0x1a, 0xb9, 0xe7, 0x26, 0xa1, 0x75, 0xa6, 0x22, 0x90, 0xd9, 0x2e, 0x82, 0x64, 0xe6, 0x72,
	0x64, 0x9b, 0x26, 0xa1, 0x84, 0x69, 0x12, 0xc9, 0x6a, 0xef, 0xdc, 0xc0, 0x89, 0x91, 0x6d, 0x99,
	0x84, 0x96, 0x98, 0x8a, 0xc0, 0xf6, 0x64, 0xfa, 0x57, 0x48, 0xea, 0x26, 0xa1, 0x0a, 0xf6, 0xdb,
	0xbf, 0x12, 0xe4, 0x2d, 0x1c, 0x79, 0x4e, 0x38, 0xcd, 0x7a, 0x96, 0x7f, 0x9d, 0xb2, 0xa9, 0xd0,
	0x9a, 0x7d, 0x6e, 0x1d, 0x1a, 0xdf, 0x1a, 0x39, 0xe1, 0x04, 0x65, 0xf2, 0x77, 0xe0, 0xc7, 0x51,
	0xca, 0x5a, 0x5e, 0x11, 0x35, 0x26, 0xa0, 0xef, 0xf8, 0xe2, 0xf1, 0x74, 0x2a, 0x68, 0xfb, 0xee,
	0x11, 0xdb, 0xef, 0x42, 0x2b, 0x5d, 0x9b, 0x5e, 0x01, 0x34, 0x28, 0xe8, 0x99, 0xa1, 0x13, 0x45,
	0x4e, 0x8a, 0x03, 0x55, 0x4d, 0x85, 0x6a, 0xac, 0x29, 0xf1, 0x6b, 0x01, 0x8b, 0xb1, 0xde, 0x42,
	0x4b, 0xde, 0xd1, 0x56, 0xa8, 0x9a, 0x0a, 0x2d, 0xb3, 0x06, 0xc2, 0xb9, 0x6e, 0x00, 0x47, 0x22,
	0xc0, 0x2e, 0xbf, 0xdf, 0x51, 0x6a, 0xd8, 0xe7, 0x89, 0xf5, 0xbf, 0x28, 0xb2, 0x56, 0x56, 0x93,
	0xdb, 0xec, 0xe6, 0x0b, 0x9e, 0x96, 0x2f, 0xe3, 0x0b, 0x34, 0xf2, 0xfc, 0x63, 0x61, 0xcd, 0x24,
	0xb4, 0x66, 0x77, 0x2d, 0xf9, 0x4a, 0xac, 0xcd, 0x2b, 0xb1, 0x7e, 0x6c, 0x54, 0xac, 0x9e, 0x17,
	0x08, 0x83, 0x3e, 0x46, 0x2d, 0x99, 0xcb, 0x5b, 0xaf, 0x63, 0xf5, 0xf1, 0x83, 0xea, 0x09, 0x4a,
	0x30, 0x83, 0xc9, 0x1c, 0xf3, 0xf0, 0x01, 0x54, 0x3f, 0x71, 0x65, 0x06, 0x1b, 0xd8, 0xec, 0xc3,
	0x3d, 0xc7, 0x89, 0xeb, 0xde, 0x3a, 0x6e, 0xc2, 0x59, 0x55, 0x68, 0x87, 0x3c, 0xed, 0xde, 0x40,
	0xfb, 0xd0, 0xd5, 0x1b, 0x3a, 0x28, 0xdb, 0x07, 0x29, 0x3e, 0x8d, 0x36, 0x94, 0x7f, 0x8b, 0xda,
	0x2c, 0xfe, 0x72, 0xf1, 0xa9, 0xf4, 0x91, 0x74, 0xaf, 0xe1, 0xc5, 0x81, 0x7b, 0x7e, 0xcc, 0xa2,
	0xbc, 0x63, 0x71, 0xfe, 0x19, 0x5e, 0x1e, 0x3e, 0x59, 0x03, 0xa0, 0x32, 0x18, 0xff, 0x1c, 0x5d,
	0xbc, 0xd7, 0x9f, 0xe5, 0xdf, 0x17, 0x3a, 0xc9, 0xbf, 0x6d, 0xbd, 0x34, 0xab, 0xe0, 0x84, 0x97,
	0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x02, 0xfe, 0x8a, 0x34, 0xc6, 0x04, 0x00, 0x00,
}
